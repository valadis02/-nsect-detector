// Please select the corresponding model

// #define SIM800L_IP5306_VERSION_20190610
// #define SIM800L_AXP192_VERSION_20200327
// #define SIM800C_AXP192_VERSION_20200609
 #define SIM800L_IP5306_VERSION_20200811

// #define TEST_RING_RI_PIN            //Note will cancel the phone call test

// #define ENABLE_SPI_SDCARD   //Uncomment will test external SD card
// See all AT commands, if wanted
#define DUMP_AT_COMMANDS

// Define the serial console for debug prints, if needed
#define TINY_GSM_DEBUG SerialMon

#include "utilities.h"
#include <ArduinoJson.h>
#include <TinyGPSPlus.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <LoRa.h>

//The TinyGPSPLUS objest
TinyGPSPlus gps;
// Set serial for debug console (to the Serial Monitor, default speed 115200)
#define SerialMon Serial
// Set serial for AT commands (to the module)
#define SerialAT  Serial1
static const int RXPin = 14, TXPin = 12;
#define ss2 21
#define rst 2
#define dio0 15
#define MOSI 13
#define MISO 12
#define SCK 14
    float temperature=10.0;
    float humidity=10.0;
    int id=0;
    int battery=1;
static const uint32_t GPSBaud = 9600;
// Configure TinyGSM library
#define TINY_GSM_MODEM_SIM800          // Modem is SIM800
#define TINY_GSM_RX_BUFFER      1024   // Set RX buffer to 1Kb

#include <TinyGsmClient.h>

#ifdef DUMP_AT_COMMANDS
#include <StreamDebugger.h>
StreamDebugger debugger(SerialAT, SerialMon);
TinyGsm modem(debugger);
#else
TinyGsm modem(SerialAT);
#endif

#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */


// Server details
const char server[] = "fieldsense.ddemo.eu";
const char resource[] = "/api/insert_sensor_data.php?api_key=7d60febfd9c79bf45ec6126f14dfe69a57444099";

// Your GPRS credentials (leave empty, if missing)
const char apn[]      = "hologram"; // Your APN
const char gprsUser[] = ""; // User
const char gprsPass[] = ""; // Password
const char simPIN[]   = ""; // SIM card PIN code, if any
char json_output[256];  //string in order to hold data

TinyGsmClient client(modem);
const int  port = 80;

void setupModem()
{
#ifdef MODEM_RST
    // Keep reset high
    pinMode(MODEM_RST, OUTPUT);
    digitalWrite(MODEM_RST, HIGH);
#endif

    pinMode(MODEM_PWRKEY, OUTPUT);
    pinMode(MODEM_POWER_ON, OUTPUT);

    // Turn on the Modem power first
    digitalWrite(MODEM_POWER_ON, HIGH);

    // Pull down PWRKEY for more than 1 second according to manual requirements
    digitalWrite(MODEM_PWRKEY, HIGH);
    delay(100);
    digitalWrite(MODEM_PWRKEY, LOW);
    delay(1000);
    digitalWrite(MODEM_PWRKEY, HIGH);

    // Initialize the indicator as an output
    pinMode(LED_GPIO, OUTPUT);
    digitalWrite(LED_GPIO, LED_OFF);
}

void turnOffNetlight()
{
    SerialMon.println("Turning off SIM800 Red LED...");
    modem.sendAT("+CNETLIGHT=0");
}

void turnOnNetlight()
{
    SerialMon.println("Turning on SIM800 Red LED...");
    modem.sendAT("+CNETLIGHT=1");
}
const int RX_PIN = 14;
const int TX_PIN = 12;
SoftwareSerial ss(RXPin, TXPin);

void setup()
{
    Serial.begin(115200);  
    SPI.begin(SCK, MISO, MOSI, ss2);
    LoRa.setPins(ss2, rst, dio0);
    if (!LoRa.begin(866E6))
    {
    Serial.println("Starting LoRa failed!");   
    }
    while(lora_receive()==false);  
     pinMode(25, OUTPUT);
    // Turn on the Modem power first
    digitalWrite(25, HIGH);
    // Set console baud rate
    SerialMon.begin(115200);
    delay(10);
    // Start power management
    if (setupPMU() == false) {
        Serial.println("Setting power error");
    }
    // Some start operations
    setupModem();
    // Set GSM module baud rate and UART pins
    SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);   
    Serial.println("start");    
    ss.begin(GPSBaud); 
  //  get_position();
}

bool lora_receive()
{
  char lora_received_message[100];
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    // received a packet
    Serial.print("Received packet '");
    // read packet
    int i=0;
    while (LoRa.available()) 
    {
      lora_received_message[i]=(char)LoRa.read();
      Serial.print(lora_received_message[i]);
      i++;      
    }
    char temp_buffer[40];
    int j=0;
    int counter =0;

    char buffer2[2];
    Serial.println("parsing");
    for(int i =0;i<15;i++)
    {
      if(lora_received_message[i]==',')
      {
        counter++;
        if(counter==1)
        {
          temperature=(float)atof(temp_buffer);
        }else if(counter==2)
        {
          humidity=(float)atof(temp_buffer);
        }
        else if(counter==3)
        {      
          battery=atoi(temp_buffer);
        }
        else if(counter==4)
        {
            id=atoi(temp_buffer);
        }
        Serial.println("next");
        j=0;
        temp_buffer[0]=0;
        temp_buffer[1]=0;
        temp_buffer[2]=0;
        temp_buffer[3]=0;
        temp_buffer[4]=0;       
      //  memset(temp_buffer,0x00,50);
      }
      else
      {        
        temp_buffer[j]=lora_received_message[i];
        Serial.print(temp_buffer[j]);       
        j++;        
      }  
    }
    // print RSSI of packet
    Serial.print("Values");
    Serial.println(temperature);
    Serial.println(humidity);
    Serial.println(battery);   
    Serial.println(id);
    return true;
  }
  else
  {
    return false;
  }
}
/*Get Position */
void get_position()
{ 
  digitalWrite(25, HIGH);
  while(1){
   while (ss.available() > 0)
    if (gps.encode(ss.read()))
      displayInfo();

  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println(F("No GPS detected: check wiring."));
    while(true);
  }
  }
}

void displayInfo()
{
  Serial.print(F("Location: ")); 
  if (gps.location.isValid())
  {
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(","));
    Serial.print(gps.location.lng(), 6);
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F("  Date/Time: "));
  if (gps.date.isValid())
  {
    Serial.print(gps.date.month());
    Serial.print(F("/"));
    Serial.print(gps.date.day());
    Serial.print(F("/"));
    Serial.print(gps.date.year());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F(" "));
  if (gps.time.isValid())
  {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
    Serial.print(F("."));
    if (gps.time.centisecond() < 10) Serial.print(F("0"));
    Serial.print(gps.time.centisecond());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.println();
}

/*JSON CREATION*/
void create_json()
{
  JsonDocument doc;
  doc["Timestamp"] = 1234;
  doc["Id"] = id;
  doc["Type of Message"]= 0;
  doc["Temperature"]=temperature;
  doc["Humidity"]= humidity;
  doc["Battery level"]=battery;
  doc["Lat"]= 23.1145432;
  doc["Long"]=32.1145432; 
  doc["Altitude"]=1;
  doc["Reserved 2"]=1;
  doc["Reserved 3"]=1;
  serializeJson(doc, json_output);
}

void loop()
{
    // Restart takes quite some time
    // To skip it, call init() instead of restart()
    SerialMon.println("Initializing modem...");
    modem.restart();

    // Turn off network status lights to reduce current consumption
    turnOffNetlight();

    // The status light cannot be turned off, only physically removed
    //turnOffStatuslight();

    // Or, use modem.init() if you don't need the complete restart
    String modemInfo = modem.getModemInfo();
    SerialMon.print("Modem: ");
    SerialMon.println(modemInfo);

    // Unlock your SIM card with a PIN if needed
    if (strlen(simPIN) && modem.getSimStatus() != 3 ) {
        modem.simUnlock(simPIN);
    }

    SerialMon.print("Waiting for network...");
    if (!modem.waitForNetwork(240000L)) {
        SerialMon.println(" fail");
        delay(10000);
        return;
    }
    SerialMon.println(" OK");

    // When the network connection is successful, turn on the indicator
    digitalWrite(LED_GPIO, LED_ON);

    if (modem.isNetworkConnected()) {
        SerialMon.println("Network connected");
    }

    SerialMon.print(F("Connecting to APN: "));
    SerialMon.print(apn);
    if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
        SerialMon.println(" fail");
        delay(10000);
        return;
    }
    SerialMon.println(" OK");

    SerialMon.print("Connecting to ");
    SerialMon.print(server);
    if (!client.connect(server, port)) {
        SerialMon.println(" fail");       
    }
    SerialMon.println(" OK");
    // Make a HTTP GET request:
    SerialMon.println("Performing HTTP POST request...");
    SerialMon.println(String("POST ") + resource + " HTTPS/1.1\r\n");
    client.print(String("POST ") + resource + " HTTP/1.1\r\n");
    client.print(String("Host: ") + server + "\r\n");
     // client.println("Connection: close");
     // client.println("Content-Type: application/json");
     // client.print("Content-Length: ");
     // client.println(256);
     // client.println();
    client.println(json_output);
    unsigned long timeout = millis();
    while (client.connected() && millis() - timeout < 10000L) {
        // Print available data
        while (client.available()) {
            char c = client.read();
            SerialMon.print(c);
            timeout = millis();
        }
    }
    SerialMon.println();

    // Shutdown
    
while(1);




    /*
    The sleep current using AXP192 power management is about 500uA,
    and the IP5306 consumes about 1mA
    */
}
